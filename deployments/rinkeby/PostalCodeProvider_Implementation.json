{
  "address": "0xFE9C3270812687F623d9A58F20914FFF258004F4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "__PostalCodeProvider_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "name": "__VRFConsumableBase_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_randomSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_requestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailable",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_available",
          "type": "uint32[]"
        }
      ],
      "name": "pushAvailable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizeTokenIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shuffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x61ad1b0b76e9bc79eb1b06eaa80058c9dc09d780bb796a634884df9b4804b86f",
  "receipt": {
    "to": null,
    "from": "0x4Bd74c39c35bB05Ca51B752EAe073072f0a8a355",
    "contractAddress": "0xFE9C3270812687F623d9A58F20914FFF258004F4",
    "transactionIndex": 40,
    "gasUsed": "1369644",
    "logsBloom": "0x
    "blockHash": "0x3483a8a160e99ce989f9cc938e522aa11f659c7def1aaee890dc407b6b961821",
    "transactionHash": "0x61ad1b0b76e9bc79eb1b06eaa80058c9dc09d780bb796a634884df9b4804b86f",
    "logs": [],
    "blockNumber": 9806527,
    "cumulativeGasUsed": "4681904",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c014dd30afe69bb6e30a7cef8e7cc185",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"__PostalCodeProvider_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"name\":\"__VRFConsumableBase_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_randomSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_requestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailable\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_available\",\"type\":\"uint32[]\"}],\"name\":\"pushAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizeTokenIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shuffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pushAvailable(uint32[])\":{\"details\":\"Set Available mints\"},\"randomizeTokenIds()\":{\"details\":\"Initialize Randomness using chainlink\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Manage PostalCodes of Propertys\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PostalCodeProvider.sol\":\"PostalCodeProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2d8b1825d587f3384d6d87655f3cb66f0d71fe8dda7d98f2f9267a4bb842927d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf87bd7a150c81aad67bb354413fe55cb005e922c6e48d3580a63e32efa913c74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9dc1ad66ada6a503bef1ffde62ac688c58eac660fe50c054f6e49e3b27ae295d\",\"license\":\"MIT\"},\"contracts/PostalCodeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./VRFConsumerBaseUpgradeable.sol\\\";\\r\\n\\r\\n/// Manage PostalCodes of Propertys\\r\\ncontract PostalCodeProvider is\\r\\n    AccessControlEnumerableUpgradeable,\\r\\n    VRFConsumerBaseUpgradable\\r\\n{\\r\\n    // Chainlink\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n\\r\\n    // Available\\r\\n    uint32[] private o;\\r\\n    uint32[] private s;\\r\\n\\r\\n    // Chainlink VRF\\r\\n    bytes32 public _requestId;\\r\\n    uint256 public _randomSeed;\\r\\n\\r\\n    // Implementation Free Space\\r\\n    uint256[48] private __gap;\\r\\n\\r\\n    function __PostalCodeProvider_init(\\r\\n        address _vrfCoordinator,\\r\\n        address _link,\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _fee\\r\\n    ) public initializer {\\r\\n        __AccessControlEnumerable_init();\\r\\n        __VRFConsumableBase_init(_vrfCoordinator, _link);\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        keyHash = _keyHash;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    /// @dev Set Available mints\\r\\n    function pushAvailable(uint32[] memory _available)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        for (uint16 i; i < _available.length; i++) {\\r\\n            o.push(_available[i]);\\r\\n            s.push(_available[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Initialize Randomness using chainlink\\r\\n    function randomizeTokenIds()\\r\\n        public\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n        returns (bytes32 requestId)\\r\\n    {\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        return requestRandomness(keyHash, fee);\\r\\n    }\\r\\n\\r\\n    /// @dev Callback function for Chainlink VRF\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        _requestId = requestId;\\r\\n        _randomSeed = randomness;\\r\\n    }\\r\\n\\r\\n    // change to internal\\r\\n    function shuffle() public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        uint256 randomness = _randomSeed;\\r\\n        // Yates Shuffle algorithm\\r\\n        for (uint16 i = 0; i < s.length - 2; i++) {\\r\\n            // Get a random integer j between [i, n)\\r\\n            uint256 j = (randomness % (s.length - 1 - i + 1)) + i;\\r\\n\\r\\n            // exchange a[i] and a[j]\\r\\n            uint32 temp = s[i];\\r\\n\\r\\n            s[i] = s[j];\\r\\n            s[j] = temp;\\r\\n\\r\\n            randomness = uint256(keccak256(abi.encode(randomness, i)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenId(uint256 tokenId) external view returns (uint256) {\\r\\n        uint256 pos = binarySearch(0, o.length - 1, tokenId);\\r\\n        return s[pos];\\r\\n    }\\r\\n\\r\\n    function getAvailable()\\r\\n        public\\r\\n        view\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n        returns (uint32[] memory)\\r\\n    {\\r\\n        return s;\\r\\n    }\\r\\n\\r\\n    function binarySearch(\\r\\n        uint256 l,\\r\\n        uint256 r,\\r\\n        uint256 x\\r\\n    ) internal view returns (uint256) {\\r\\n        // Check base case\\r\\n        if (r >= l) {\\r\\n            uint256 mid = l + (r - l) / 2;\\r\\n\\r\\n            // If element is present at the middle itself\\r\\n            if (o[mid] == x) {\\r\\n                return mid;\\r\\n            }\\r\\n            // If element is smaller than mid, then it\\r\\n            //can only be present in left subarray\\r\\n            else if (o[mid] > x) {\\r\\n                return binarySearch(l, mid - 1, x);\\r\\n\\r\\n                // Else the element can only be present\\r\\n                // in right subarray\\r\\n            } else {\\r\\n                return binarySearch(mid + 1, r, x);\\r\\n            }\\r\\n        } else {\\r\\n            // Element is not present in the array\\r\\n            revert(\\\"Element is not present in the array\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x283ff055e8a628df19505b1bd7b7eb0256e4da5d6c82dd54e270e7bf2045aeff\",\"license\":\"MIT\"},\"contracts/VRFConsumerBaseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\nabstract contract VRFConsumerBaseUpgradable {\\r\\n    uint256 private constant USER_SEED_PLACEHOLDER = 0;\\r\\n    LinkTokenInterface internal LINK;\\r\\n    address private vrfCoordinator;\\r\\n\\r\\n    mapping(bytes32 => uint256) private nonces;\\r\\n\\r\\n    // Reserve Storage\\r\\n    uint256[50] private ______gap;\\r\\n\\r\\n    // replaced constructor with initializer <--\\r\\n    function __VRFConsumableBase_init(address _vrfCoordinator, address _link)\\r\\n        public\\r\\n    {\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        LINK = LinkTokenInterface(_link);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    function requestRandomness(bytes32 _keyHash, uint256 _fee)\\r\\n        internal\\r\\n        returns (bytes32 requestId)\\r\\n    {\\r\\n        LINK.transferAndCall(\\r\\n            vrfCoordinator,\\r\\n            _fee,\\r\\n            abi.encode(_keyHash, USER_SEED_PLACEHOLDER)\\r\\n        );\\r\\n\\r\\n        uint256 vRFSeed = makeVRFInputSeed(\\r\\n            _keyHash,\\r\\n            USER_SEED_PLACEHOLDER,\\r\\n            address(this),\\r\\n            nonces[_keyHash]\\r\\n        );\\r\\n\\r\\n        nonces[_keyHash] = nonces[_keyHash] + 1;\\r\\n        return makeRequestId(_keyHash, vRFSeed);\\r\\n    }\\r\\n\\r\\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness)\\r\\n        external\\r\\n    {\\r\\n        require(\\r\\n            msg.sender == vrfCoordinator,\\r\\n            \\\"Only VRFCoordinator can fulfill\\\"\\r\\n        );\\r\\n        fulfillRandomness(requestId, randomness);\\r\\n    }\\r\\n\\r\\n    function makeVRFInputSeed(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _userSeed,\\r\\n        address _requester,\\r\\n        uint256 _nonce\\r\\n    ) internal pure returns (uint256) {\\r\\n        return\\r\\n            uint256(\\r\\n                keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5368f214dbaad66e4f5b69e8ad2adb5f68c5d3b44664fe754d3a156e134aaaa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80639010d07c116100ad578063ca15c87311610071578063ca15c87314610255578063d547741f14610268578063d7c230fd1461027b578063e821f77214610283578063f9cc06051461029657600080fd5b80639010d07c146101f257806391d148541461021d57806394985ddd14610230578063a217fddf14610243578063c1540de71461024b57600080fd5b806326e8a929116100f457806326e8a9291461019c5780632f2ff15d146101af57806336568abe146101c25780635b4425d5146101d55780635e33bdda146101df57600080fd5b806301ffc9a71461012657806314ff5ea31461014e578063248a9ca31461016f5780632520bf0414610192575b600080fd5b6101396101343660046112a7565b6102ab565b60405190151581526020015b60405180910390f35b61016161015c3660046112d1565b6102d6565b604051908152602001610145565b61016161017d3660046112d1565b60009081526065602052604090206001015490565b61019a610338565b005b61019a6101aa366004611319565b610510565b61019a6101bd3660046113f5565b61060a565b61019a6101d03660046113f5565b61062c565b6101616101025481565b61019a6101ed366004611421565b61064e565b610205610200366004611463565b6106ee565b6040516001600160a01b039091168152602001610145565b61013961022b3660046113f5565b61070d565b61019a61023e366004611463565b610738565b610161600081565b6101616101035481565b6101616102633660046112d1565b6107a3565b61019a6102763660046113f5565b6107ba565b6101616107c4565b61019a610291366004611485565b6108c5565b61029e6108f3565b60405161014591906114af565b60006001600160e01b03198216635a05180f60e01b14806102d057506102d082610985565b92915050565b6000806102f760006001610100805490506102f1919061150f565b856109ba565b9050610101818154811061030d5761030d611526565b6000918252602090912060088204015460079091166004026101000a900463ffffffff169392505050565b60006103448133610aec565b6101035460005b6101015461035b9060029061150f565b8161ffff16101561050b576101015460009061ffff83169081906103819060019061150f565b61038b919061150f565b61039690600161153c565b6103a0908561156a565b6103aa919061153c565b905060006101018361ffff16815481106103c6576103c6611526565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050610101828154811061040257610402611526565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff166101018461ffff168154811061044057610440611526565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555080610101838154811061048857610488611526565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555083836040516020016104db92919091825261ffff16602082015260400190565b6040516020818303038152906040528051906020012060001c9350505080806105039061157e565b91505061034b565b505050565b600061051c8133610aec565b60005b82518161ffff16101561050b57610100838261ffff168151811061054557610545611526565b602002602001015190806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff160217905550610101838261ffff16815181106105b1576105b1611526565b60209081029190910181015182546001810184556000938452919092206008820401805460079092166004026101000a63ffffffff818102199093169290931692909202179055806106028161157e565b91505061051f565b6106148282610b50565b600082815260976020526040902061050b9082610b76565b6106368282610b8b565b600082815260976020526040902061050b9082610c05565b600054610100900460ff1680610667575060005460ff16155b61068c5760405162461bcd60e51b8152600401610683906115a0565b60405180910390fd5b600054610100900460ff161580156106ae576000805461ffff19166101011790555b6106b6610c1a565b6106c085856108c5565b6106cb600033610ca6565b60fe83905560ff82905580156106e7576000805461ff00191690555b5050505050565b60008281526097602052604081206107069083610cb0565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60ca546001600160a01b031633146107925760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610683565b6101029190915561010355565b5050565b60008181526097602052604081206102d090610cbc565b6106368282610cc6565b6000806107d18133610aec565b60ff5460c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561081757600080fd5b505afa15801561082b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084f91906115ee565b10156108b15760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060448201526a1dda5d1a0819985d58d95d60aa1b6064820152608401610683565b6108bf60fe5460ff54610cec565b91505090565b60ca80546001600160a01b039384166001600160a01b03199182161790915560c98054929093169116179055565b606060006109018133610aec565b61010180548060200260200160405190810160405280929190818152602001828054801561097a57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161093d5790505b505050505091505090565b60006001600160e01b03198216637965db0b60e01b14806102d057506301ffc9a760e01b6001600160e01b03198316146102d0565b6000838310610a9857600060026109d1868661150f565b6109db9190611607565b6109e5908661153c565b90508261010082815481106109fc576109fc611526565b6000918252602090912060088204015460079091166004026101000a900463ffffffff161415610a2d579050610706565b826101008281548110610a4257610a42611526565b6000918252602090912060088204015460079091166004026101000a900463ffffffff161115610a8357610a7b856102f160018461150f565b915050610706565b610a7b610a9182600161153c565b85856109ba565b60405162461bcd60e51b815260206004820152602360248201527f456c656d656e74206973206e6f742070726573656e7420696e2074686520617260448201526272617960e81b6064820152608401610683565b610af6828261070d565b61079f57610b0e816001600160a01b03166014610e3e565b610b19836020610e3e565b604051602001610b2a92919061164b565b60408051601f198184030181529082905262461bcd60e51b8252610683916004016116ec565b600082815260656020526040902060010154610b6c8133610aec565b61050b8383610fda565b6000610706836001600160a01b038416611060565b6001600160a01b0381163314610bfb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610683565b61079f82826110af565b6000610706836001600160a01b038416611116565b600054610100900460ff1680610c33575060005460ff16155b610c4f5760405162461bcd60e51b8152600401610683906115a0565b600054610100900460ff16158015610c71576000805461ffff19166101011790555b610c79611209565b610c81611209565b610c89611209565b610c91611209565b8015610ca3576000805461ff00191690555b50565b6106148282611273565b6000610706838361127d565b60006102d0825490565b600082815260656020526040902060010154610ce28133610aec565b61050b83836110af565b60c95460ca54604080516020810186905260008183018190528251808303840181526060830193849052630200057560e51b909352936001600160a01b0390811693634000aea093610d489392909116918791906064016116ff565b602060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a919061172f565b50600083815260cb6020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a090910190925281519183019190912093879052919052610df690600161153c565b600085815260cb6020526040902055610e368482604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b949350505050565b60606000610e4d836002611751565b610e5890600261153c565b67ffffffffffffffff811115610e7057610e706112ea565b6040519080825280601f01601f191660200182016040528015610e9a576020820181803683370190505b509050600360fc1b81600081518110610eb557610eb5611526565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ee457610ee4611526565b60200101906001600160f81b031916908160001a9053506000610f08846002611751565b610f1390600161153c565b90505b6001811115610f8b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610f4757610f47611526565b1a60f81b828281518110610f5d57610f5d611526565b60200101906001600160f81b031916908160001a90535060049490941c93610f8481611770565b9050610f16565b5083156107065760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610683565b610fe4828261070d565b61079f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561101c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546110a7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102d0565b5060006102d0565b6110b9828261070d565b1561079f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156111ff57600061113a60018361150f565b855490915060009061114e9060019061150f565b90508181146111b357600086600001828154811061116e5761116e611526565b906000526020600020015490508087600001848154811061119157611191611526565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806111c4576111c4611787565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102d0565b60009150506102d0565b600054610100900460ff1680611222575060005460ff16155b61123e5760405162461bcd60e51b8152600401610683906115a0565b600054610100900460ff16158015610c91576000805461ffff19166101011790558015610ca3576000805461ff001916905550565b61079f8282610fda565b600082600001828154811061129457611294611526565b9060005260206000200154905092915050565b6000602082840312156112b957600080fd5b81356001600160e01b03198116811461070657600080fd5b6000602082840312156112e357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff8116811461131457600080fd5b919050565b6000602080838503121561132c57600080fd5b823567ffffffffffffffff8082111561134457600080fd5b818501915085601f83011261135857600080fd5b81358181111561136a5761136a6112ea565b8060051b604051601f19603f8301168101818110858211171561138f5761138f6112ea565b6040529182528482019250838101850191888311156113ad57600080fd5b938501935b828510156113d2576113c385611300565b845293850193928501926113b2565b98975050505050505050565b80356001600160a01b038116811461131457600080fd5b6000806040838503121561140857600080fd5b82359150611418602084016113de565b90509250929050565b6000806000806080858703121561143757600080fd5b611440856113de565b935061144e602086016113de565b93969395505050506040820135916060013590565b6000806040838503121561147657600080fd5b50508035926020909101359150565b6000806040838503121561149857600080fd5b6114a1836113de565b9150611418602084016113de565b6020808252825182820181905260009190848201906040850190845b818110156114ed57835163ffffffff16835292840192918401916001016114cb565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611521576115216114f9565b500390565b634e487b7160e01b600052603260045260246000fd5b6000821982111561154f5761154f6114f9565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261157957611579611554565b500690565b600061ffff80831681811415611596576115966114f9565b6001019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561160057600080fd5b5051919050565b60008261161657611616611554565b500490565b60005b8381101561163657818101518382015260200161161e565b83811115611645576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161168381601785016020880161161b565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116b481602884016020880161161b565b01602801949350505050565b600081518084526116d881602086016020860161161b565b601f01601f19169290920160200192915050565b60208152600061070660208301846116c0565b60018060a01b038416815282602082015260606040820152600061172660608301846116c0565b95945050505050565b60006020828403121561174157600080fd5b8151801515811461070657600080fd5b600081600019048311821515161561176b5761176b6114f9565b500290565b60008161177f5761177f6114f9565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206116df70e1a07c7d50510e887be4f170c5ec1ef4e4e60280d63523473d0da54764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80639010d07c116100ad578063ca15c87311610071578063ca15c87314610255578063d547741f14610268578063d7c230fd1461027b578063e821f77214610283578063f9cc06051461029657600080fd5b80639010d07c146101f257806391d148541461021d57806394985ddd14610230578063a217fddf14610243578063c1540de71461024b57600080fd5b806326e8a929116100f457806326e8a9291461019c5780632f2ff15d146101af57806336568abe146101c25780635b4425d5146101d55780635e33bdda146101df57600080fd5b806301ffc9a71461012657806314ff5ea31461014e578063248a9ca31461016f5780632520bf0414610192575b600080fd5b6101396101343660046112a7565b6102ab565b60405190151581526020015b60405180910390f35b61016161015c3660046112d1565b6102d6565b604051908152602001610145565b61016161017d3660046112d1565b60009081526065602052604090206001015490565b61019a610338565b005b61019a6101aa366004611319565b610510565b61019a6101bd3660046113f5565b61060a565b61019a6101d03660046113f5565b61062c565b6101616101025481565b61019a6101ed366004611421565b61064e565b610205610200366004611463565b6106ee565b6040516001600160a01b039091168152602001610145565b61013961022b3660046113f5565b61070d565b61019a61023e366004611463565b610738565b610161600081565b6101616101035481565b6101616102633660046112d1565b6107a3565b61019a6102763660046113f5565b6107ba565b6101616107c4565b61019a610291366004611485565b6108c5565b61029e6108f3565b60405161014591906114af565b60006001600160e01b03198216635a05180f60e01b14806102d057506102d082610985565b92915050565b6000806102f760006001610100805490506102f1919061150f565b856109ba565b9050610101818154811061030d5761030d611526565b6000918252602090912060088204015460079091166004026101000a900463ffffffff169392505050565b60006103448133610aec565b6101035460005b6101015461035b9060029061150f565b8161ffff16101561050b576101015460009061ffff83169081906103819060019061150f565b61038b919061150f565b61039690600161153c565b6103a0908561156a565b6103aa919061153c565b905060006101018361ffff16815481106103c6576103c6611526565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050610101828154811061040257610402611526565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff166101018461ffff168154811061044057610440611526565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555080610101838154811061048857610488611526565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555083836040516020016104db92919091825261ffff16602082015260400190565b6040516020818303038152906040528051906020012060001c9350505080806105039061157e565b91505061034b565b505050565b600061051c8133610aec565b60005b82518161ffff16101561050b57610100838261ffff168151811061054557610545611526565b602002602001015190806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff160217905550610101838261ffff16815181106105b1576105b1611526565b60209081029190910181015182546001810184556000938452919092206008820401805460079092166004026101000a63ffffffff818102199093169290931692909202179055806106028161157e565b91505061051f565b6106148282610b50565b600082815260976020526040902061050b9082610b76565b6106368282610b8b565b600082815260976020526040902061050b9082610c05565b600054610100900460ff1680610667575060005460ff16155b61068c5760405162461bcd60e51b8152600401610683906115a0565b60405180910390fd5b600054610100900460ff161580156106ae576000805461ffff19166101011790555b6106b6610c1a565b6106c085856108c5565b6106cb600033610ca6565b60fe83905560ff82905580156106e7576000805461ff00191690555b5050505050565b60008281526097602052604081206107069083610cb0565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60ca546001600160a01b031633146107925760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610683565b6101029190915561010355565b5050565b60008181526097602052604081206102d090610cbc565b6106368282610cc6565b6000806107d18133610aec565b60ff5460c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561081757600080fd5b505afa15801561082b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084f91906115ee565b10156108b15760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060448201526a1dda5d1a0819985d58d95d60aa1b6064820152608401610683565b6108bf60fe5460ff54610cec565b91505090565b60ca80546001600160a01b039384166001600160a01b03199182161790915560c98054929093169116179055565b606060006109018133610aec565b61010180548060200260200160405190810160405280929190818152602001828054801561097a57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161093d5790505b505050505091505090565b60006001600160e01b03198216637965db0b60e01b14806102d057506301ffc9a760e01b6001600160e01b03198316146102d0565b6000838310610a9857600060026109d1868661150f565b6109db9190611607565b6109e5908661153c565b90508261010082815481106109fc576109fc611526565b6000918252602090912060088204015460079091166004026101000a900463ffffffff161415610a2d579050610706565b826101008281548110610a4257610a42611526565b6000918252602090912060088204015460079091166004026101000a900463ffffffff161115610a8357610a7b856102f160018461150f565b915050610706565b610a7b610a9182600161153c565b85856109ba565b60405162461bcd60e51b815260206004820152602360248201527f456c656d656e74206973206e6f742070726573656e7420696e2074686520617260448201526272617960e81b6064820152608401610683565b610af6828261070d565b61079f57610b0e816001600160a01b03166014610e3e565b610b19836020610e3e565b604051602001610b2a92919061164b565b60408051601f198184030181529082905262461bcd60e51b8252610683916004016116ec565b600082815260656020526040902060010154610b6c8133610aec565b61050b8383610fda565b6000610706836001600160a01b038416611060565b6001600160a01b0381163314610bfb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610683565b61079f82826110af565b6000610706836001600160a01b038416611116565b600054610100900460ff1680610c33575060005460ff16155b610c4f5760405162461bcd60e51b8152600401610683906115a0565b600054610100900460ff16158015610c71576000805461ffff19166101011790555b610c79611209565b610c81611209565b610c89611209565b610c91611209565b8015610ca3576000805461ff00191690555b50565b6106148282611273565b6000610706838361127d565b60006102d0825490565b600082815260656020526040902060010154610ce28133610aec565b61050b83836110af565b60c95460ca54604080516020810186905260008183018190528251808303840181526060830193849052630200057560e51b909352936001600160a01b0390811693634000aea093610d489392909116918791906064016116ff565b602060405180830381600087803b158015610d6257600080fd5b505af1158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a919061172f565b50600083815260cb6020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a090910190925281519183019190912093879052919052610df690600161153c565b600085815260cb6020526040902055610e368482604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b949350505050565b60606000610e4d836002611751565b610e5890600261153c565b67ffffffffffffffff811115610e7057610e706112ea565b6040519080825280601f01601f191660200182016040528015610e9a576020820181803683370190505b509050600360fc1b81600081518110610eb557610eb5611526565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ee457610ee4611526565b60200101906001600160f81b031916908160001a9053506000610f08846002611751565b610f1390600161153c565b90505b6001811115610f8b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610f4757610f47611526565b1a60f81b828281518110610f5d57610f5d611526565b60200101906001600160f81b031916908160001a90535060049490941c93610f8481611770565b9050610f16565b5083156107065760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610683565b610fe4828261070d565b61079f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561101c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546110a7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102d0565b5060006102d0565b6110b9828261070d565b1561079f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815260018301602052604081205480156111ff57600061113a60018361150f565b855490915060009061114e9060019061150f565b90508181146111b357600086600001828154811061116e5761116e611526565b906000526020600020015490508087600001848154811061119157611191611526565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806111c4576111c4611787565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102d0565b60009150506102d0565b600054610100900460ff1680611222575060005460ff16155b61123e5760405162461bcd60e51b8152600401610683906115a0565b600054610100900460ff16158015610c91576000805461ffff19166101011790558015610ca3576000805461ff001916905550565b61079f8282610fda565b600082600001828154811061129457611294611526565b9060005260206000200154905092915050565b6000602082840312156112b957600080fd5b81356001600160e01b03198116811461070657600080fd5b6000602082840312156112e357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff8116811461131457600080fd5b919050565b6000602080838503121561132c57600080fd5b823567ffffffffffffffff8082111561134457600080fd5b818501915085601f83011261135857600080fd5b81358181111561136a5761136a6112ea565b8060051b604051601f19603f8301168101818110858211171561138f5761138f6112ea565b6040529182528482019250838101850191888311156113ad57600080fd5b938501935b828510156113d2576113c385611300565b845293850193928501926113b2565b98975050505050505050565b80356001600160a01b038116811461131457600080fd5b6000806040838503121561140857600080fd5b82359150611418602084016113de565b90509250929050565b6000806000806080858703121561143757600080fd5b611440856113de565b935061144e602086016113de565b93969395505050506040820135916060013590565b6000806040838503121561147657600080fd5b50508035926020909101359150565b6000806040838503121561149857600080fd5b6114a1836113de565b9150611418602084016113de565b6020808252825182820181905260009190848201906040850190845b818110156114ed57835163ffffffff16835292840192918401916001016114cb565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611521576115216114f9565b500390565b634e487b7160e01b600052603260045260246000fd5b6000821982111561154f5761154f6114f9565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261157957611579611554565b500690565b600061ffff80831681811415611596576115966114f9565b6001019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561160057600080fd5b5051919050565b60008261161657611616611554565b500490565b60005b8381101561163657818101518382015260200161161e565b83811115611645576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161168381601785016020880161161b565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516116b481602884016020880161161b565b01602801949350505050565b600081518084526116d881602086016020860161161b565b601f01601f19169290920160200192915050565b60208152600061070660208301846116c0565b60018060a01b038416815282602082015260606040820152600061172660608301846116c0565b95945050505050565b60006020828403121561174157600080fd5b8151801515811461070657600080fd5b600081600019048311821515161561176b5761176b6114f9565b500290565b60008161177f5761177f6114f9565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206116df70e1a07c7d50510e887be4f170c5ec1ef4e4e60280d63523473d0da54764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pushAvailable(uint32[])": {
        "details": "Set Available mints"
      },
      "randomizeTokenIds()": {
        "details": "Initialize Randomness using chainlink"
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Manage PostalCodes of Propertys",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 868,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 871,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2713,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3403,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 353,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)348_storage)"
      },
      {
        "astId": 638,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4040_storage)"
      },
      {
        "astId": 303,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12261,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "LINK",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(LinkTokenInterface)94"
      },
      {
        "astId": 12263,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 12267,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "nonces",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 12271,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "______gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9501,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "keyHash",
        "offset": 0,
        "slot": "254",
        "type": "t_bytes32"
      },
      {
        "astId": 9503,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "fee",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 9506,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "o",
        "offset": 0,
        "slot": "256",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 9509,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "s",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 9511,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "_requestId",
        "offset": 0,
        "slot": "258",
        "type": "t_bytes32"
      },
      {
        "astId": 9513,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "_randomSeed",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 9517,
        "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "260",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)94": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4040_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4040_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)348_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)348_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4040_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4039,
            "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3739_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)348_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 345,
            "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 347,
            "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3739_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 3734,
            "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3738,
            "contract": "contracts/PostalCodeProvider.sol:PostalCodeProvider",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}